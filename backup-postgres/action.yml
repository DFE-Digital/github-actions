name: Backup postgres
description: Backup an Azure postgres database
inputs:
  storage-account:
    description: Name of the Azure storage account to store the backup
    required: true
  app-name:
    description: Name of the app deployment
    required: true
  namespace:
    description: Namespace where the app is deployed. Required when role is not cluster admin.
    required: false
  resource-group:
    description: Name of the Azure resource group
    required: true
  cluster:
    description: AKS cluster to use (test or production).
    required: true
  azure-credentials:
    description: 'A JSON string containing service principal credentials e.g. {"client_id": "x", "client_secret": "x", "subscription_id": "x", "tenant_id": "x"}'
    required: false
    default: ''
  azure-client-id:
    description: Azure service principal or managed identity client ID when using OIDC
    required: false
    default: ''
  azure-subscription-id:
    description: Azure service principal or managed identity subscription ID when using OIDC
    required: false
    default: ''
  azure-tenant-id:
    description: Azure service principal or managed identity tenant ID when using OIDC
    required: false
    default: ''
  backup-file:
    description: Name of the backup file
    required: true
  slack-webhook:
    description: Name of the slack webhook
    required: true
  db-server-name:
    description: |
      Name of the database server. Default is the live server. When backing up a point-in-time (PTR) server, use the full name of the PTR server. (Optional)
    required: false
  exclude-tables:
    description: |
      A string of table names to exclude data from while preserving their schema. Use for creating sanitized backups. (Optional, defaults to '')
    required: false
    default: ''

runs:
  using: composite
  steps:
    - uses: azure/login@v2
      with:
        creds: ${{ inputs.azure-credentials }}
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Setup postgres client
      uses: DFE-Digital/github-actions/install-postgres-client@master
      with:
        version: 17

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set up cluster environment variables
      shell: bash
      run: |
        case ${{ inputs.cluster }} in
          test)
            echo "cluster_rg=s189t01-tsc-ts-rg" >> $GITHUB_ENV
            echo "cluster_name=s189t01-tsc-test-aks" >> $GITHUB_ENV
            ;;
          production)
            echo "cluster_rg=s189p01-tsc-pd-rg" >> $GITHUB_ENV
            echo "cluster_name=s189p01-tsc-production-aks" >> $GITHUB_ENV
            ;;
          *)
            echo "unknown cluster"
            ;;
        esac

    - name: K8 setup
      shell: bash
      run: |
        az aks get-credentials --overwrite-existing -g ${{ env.cluster_rg }} -n ${{ env.cluster_name }}
        kubelogin convert-kubeconfig -l $AAD_LOGIN_METHOD
        # install konduit
        curl -s https://raw.githubusercontent.com/DFE-Digital/teacher-services-cloud/main/scripts/konduit.sh -o ./konduit.sh
        chmod +x ./konduit.sh

    - name: Set Connection String
      shell: bash
      run: |
        STORAGE_CONN_STR=$(az storage account show-connection-string -g ${{ inputs.resource-group }} -n ${{ inputs.storage-account }} --query 'connectionString')
        echo "::add-mask::$STORAGE_CONN_STR"
        echo "AZURE_STORAGE_CONNECTION_STRING=$STORAGE_CONN_STR" >> $GITHUB_ENV

    - name: Create compressed backup for aks env database and Upload Backup to Azure Storage
      shell: bash
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az config set core.only_show_errors=true

        BACKUP_FILE="${{ inputs.backup-file }}.gz"
        BLOB_NAME=$(basename "$BACKUP_FILE")

        echo "Checking if backup $BLOB_NAME already exists in Azure Blob Storage..."

        BACKUP_EXISTS=$(az storage blob exists \
          --container-name database-backup \
          --name "$BLOB_NAME" \
          --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
          --query "exists" -o tsv)

        if [ "$BACKUP_EXISTS" = "true" ]; then
          echo "Backup $BLOB_NAME already exists. Skipping backup to avoid overwrite."
          exit 1
        else
          echo "Backup does not exist. Uploading backup..."
          if [[ -n "${{ inputs.namespace }}" ]]; then
            NAMESPACE_ARG="-n ${{ inputs.namespace }}"
          fi
          if [[ -n "${{ inputs.db-server-name }}" ]]; then
            DB_SERVER_NAME_ARG="-s ${{ inputs.db-server-name }}"
          fi
          EXCLUDE_OPTS=""
          if [[ -n "${{ inputs.exclude-tables }}" ]]; then
            IFS=', ' read -ra TABLES <<< "${{ inputs.exclude-tables }}"
            for table in "${TABLES[@]}"; do
              [[ -z "$table" ]] && continue
              table=$(echo "$table" | xargs)
              EXCLUDE_OPTS="$EXCLUDE_OPTS --exclude-table-data=$table"
            done
          fi
          ./konduit.sh ${NAMESPACE_ARG} ${DB_SERVER_NAME_ARG} -t 7200 -x ${{ inputs.app-name }} -- pg_dump -E utf8 --clean --compress=1 --if-exists --no-owner --verbose --no-password $EXCLUDE_OPTS -f ${{ inputs.backup-file }}.gz
          az storage azcopy blob upload --container database-backup \
          --source ${{ inputs.backup-file }}.gz
        fi

    - name: Backup Summary
      if: success()
      shell: bash
      run: |
        NOW=$(TZ=Europe/London date +"%F %R")
        echo 'BACKUP SUCCESSFUL!' >> $GITHUB_STEP_SUMMARY
        echo '  APP: ${{ inputs.app-name }}' >> $GITHUB_STEP_SUMMARY
        echo "  AT : ${NOW}" >> $GITHUB_STEP_SUMMARY
        echo '  DB SERVER: ${{ env.DB_SERVER  }}' >> $GITHUB_STEP_SUMMARY
        echo '  STORAGE ACCOUNT: ${{ inputs.storage-account }}' >> $GITHUB_STEP_SUMMARY
        echo '  FILENAME: ${{ inputs.backup-file }}.gz' >> $GITHUB_STEP_SUMMARY
      env:
        DB_SERVER: ${{ inputs.db-server-name || 'default for app'   }}

    - name: Notify Slack channel on job failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Database ${{ inputs.db-server-name }} backup failure
        SLACK_MESSAGE: ${{ inputs.app-name }} backup job failed
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_COLOR: failure
        SLACK_FOOTER: Sent from backup job in backup-db workflow
