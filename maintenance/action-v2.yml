name: Maintenance V2
description: Enable or disable maintenance for a service with centralized templates
inputs:
  environment:
    description: Name of the app environment
    required: true
  azure-credentials:
    description: 'A JSON string containing service principal credentials e.g. {"client_id": "x", "client_secret": "x", "subscription_id": "x", "tenant_id": "x"}'
    required: false
    default: ''
  azure-client-id:
    description: Azure service principal or managed identity client ID when using OIDC
    required: false
    default: ''
  azure-subscription-id:
    description: Azure service principal or managed identity subscription ID when using OIDC
    required: false
    default: ''
  azure-tenant-id:
    description: Azure service principal or managed identity tenant ID when using OIDC
    required: false
    default: ''
  mode:
    description: Maintenance mode to implement, either enable or disable
    required: true
  docker-repository:
    description: Name of the maint app docker repository
    required: false
  github-token:
    description: Default Github token retrieved via secrets.GITHUB_TOKEN or PAT with permission to the repository (Required)
    required: false
  service-name:
    description: Human-readable service name for the maintenance page
    required: false
    default: 'This service'
  maintenance-config-path:
    description: Path to service-specific maintenance configuration file
    required: false
    default: ''
  template-ref:
    description: Reference (branch/tag/commit) of teacher-services-cloud to use for templates
    required: false
    default: 'main'

runs:
  using: composite
  steps:
    - uses: azure/login@v2
      if: inputs.azure-credentials != ''
      with:
        creds: ${{ inputs.azure-credentials }}

    - uses: azure/login@v2
      if: inputs.azure-credentials == ''
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set ARM and kubelogin environment
      uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Fetch maintenance page templates
      if: inputs.mode == 'enable'
      shell: bash
      run: |
        echo "Fetching maintenance page templates from teacher-services-cloud..."
        
        # Create temp directory for building
        TEMP_BUILD_DIR=$(mktemp -d)
        echo "TEMP_BUILD_DIR=$TEMP_BUILD_DIR" >> $GITHUB_ENV
        
        # Clone only the templates directory (sparse checkout)
        cd $TEMP_BUILD_DIR
        git clone --filter=blob:none --sparse https://github.com/DFE-Digital/teacher-services-cloud.git
        cd teacher-services-cloud
        git sparse-checkout set templates/new_service/maintenance_page
        git checkout ${{ inputs.template-ref }}
        
        # Copy template files to build directory
        cp -r templates/new_service/maintenance_page $TEMP_BUILD_DIR/maintenance_build
        
        echo "Templates fetched successfully"

    - name: Apply service customizations
      if: inputs.mode == 'enable' && inputs.maintenance-config-path != ''
      shell: bash
      run: |
        echo "Applying service customizations..."
        
        # Check if service has local customization file
        if [[ -f "${{ inputs.maintenance-config-path }}" ]]; then
          echo "Found service configuration at ${{ inputs.maintenance-config-path }}"
          
          # Copy service config to build directory
          cp "${{ inputs.maintenance-config-path }}" $TEMP_BUILD_DIR/maintenance_build/config.json
          
          # Apply customizations using jq or sed
          # This is a simple example - could be enhanced
          SERVICE_NAME=$(jq -r '.service_name // "This service"' $TEMP_BUILD_DIR/maintenance_build/config.json)
          
          # Replace placeholders in HTML
          sed -i "s/#SERVICE_PRETTY#/$SERVICE_NAME/g" $TEMP_BUILD_DIR/maintenance_build/html/index.html
          
          # Apply any custom message if provided
          if [[ $(jq -r 'has("maintenance_message")' $TEMP_BUILD_DIR/maintenance_build/config.json) == "true" ]]; then
            # This would require more complex HTML manipulation
            echo "Custom maintenance message found - would apply here"
          fi
        else
          echo "No service configuration found, using defaults"
          # Use the service-name input for basic customization
          sed -i "s/#SERVICE_PRETTY#/${{ inputs.service-name }}/g" $TEMP_BUILD_DIR/maintenance_build/html/index.html
        fi

    - name: Check for local overrides
      if: inputs.mode == 'enable'
      shell: bash
      run: |
        echo "Checking for local maintenance page overrides..."
        
        # If service has local maintenance_page directory with overrides, copy them
        if [[ -d "maintenance_page" ]]; then
          echo "Found local maintenance_page directory - applying overrides"
          
          # Copy local files over template files (allows partial overrides)
          # Only copy files that exist, preserving template structure
          for file in maintenance_page/*; do
            if [[ -f "$file" ]]; then
              cp "$file" "$TEMP_BUILD_DIR/maintenance_build/"
              echo "Override applied: $(basename $file)"
            fi
          done
          
          # Check for local HTML overrides
          if [[ -d "maintenance_page/html" ]]; then
            cp -r maintenance_page/html/* "$TEMP_BUILD_DIR/maintenance_build/html/" 2>/dev/null || true
            echo "HTML overrides applied"
          fi
        fi

    - name: Build and push docker image
      if: inputs.mode == 'enable'
      id: build-image
      uses: DFE-Digital/github-actions/build-docker-image@master
      with:
        github-token: ${{ inputs.github-token }}
        dockerfile-path: ${{ env.TEMP_BUILD_DIR }}/maintenance_build/Dockerfile
        docker-repository: ${{ inputs.docker-repository }}
        context: ${{ env.TEMP_BUILD_DIR }}/maintenance_build

    - name: Clean up temp directory
      if: inputs.mode == 'enable'
      shell: bash
      run: |
        rm -rf $TEMP_BUILD_DIR

    - name: Enable maintenance mode
      if: inputs.mode == 'enable'
      shell: bash
      run: make ci ${{ inputs.environment }} maintenance-fail-over
      env:
        MAINTENANCE_IMAGE_TAG: ${{steps.build-image.outputs.tag}}

    - name: Disable maintenance mode
      if: inputs.mode == 'disable'
      shell: bash
      run: make ci ${{ inputs.environment }} disable-maintenance

    - name: Maintenance Summary
      if: success()
      shell: bash
      run: |
        NOW=$(TZ=Europe/London date +"%F %R")
        echo 'MAINTENANCE PAGE ${{ inputs.mode }}d!' >> $GITHUB_STEP_SUMMARY
        echo 'ENV: ${{ inputs.environment }}' >> $GITHUB_STEP_SUMMARY
        echo "AT : ${NOW}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ inputs.mode }}" == "enable" ]]; then
          TEMP_URLS=$(awk '/name:.*cloud/ {print $2}' ./maintenance_page/manifests/${{ inputs.environment }}/ingress_temp*.yml)
          echo 'TEMP URLS:' >> $GITHUB_STEP_SUMMARY
          echo "${TEMP_URLS}" >> $GITHUB_STEP_SUMMARY
        fi