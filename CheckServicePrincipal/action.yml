name: Check Service Principal
description:
inputs:
  AzureCredentials:
    description: 'Azure Credentials'
    required:    true
  ServicePrincipal:
    description: 'Service Principal you want to check'
    required:    true
  ExpiresWithinDays:
    description: 'Only print keys that expire within the input value (days)'
    required:    true
    default:     30
  TennantName:
    description: 'Tennant Name you want to check'
    required:    false
    default:     platform.education.gov.uk
outputs:
  json_data:
     value: ${{ steps.get_expiry.outputs.result }}
     description: Result in JSON format
runs:
  using: composite
  steps:
       - name: Get Expiry Date
         shell: pwsh
         id: get_expiry
         run: |
              function RefreshToken($loginURL, $clientId, $clientSecret, $tenantName) {
                  $body = @{grant_type = "client_credentials"; client_id = $clientId; client_secret = $clientSecret; scope = $env:SCOPE }
                  $oauthResponse = Invoke-RestMethod -Method POST -Uri $loginURL/$tenantName/oauth2/v2.0/token -Body $body
                  return $oauthResponse
              }

              $credentials = ( $env:AZURE_CREDENTIALS | ConvertFrom-Json)
              $body = @{grant_type = "client_credentials"; client_id = $credentials.clientId; client_secret = $credentials.clientSecret; scope = $env:SCOPE }
              $oauth = RefreshToken -loginURL $env:LOGIN_URL  -resource $resource -clientId $credentials.clientId  -clientSecret $credentials.clientSecret -tenantName $env:TENNANT_NAME
              Write-Output "Connected with OAuth"
              $headerParams = @{'Authorization' = "$($oauth.token_type) $($oauth.access_token)" }
              $applicationsList = (Invoke-WebRequest -Headers $headerParams -Uri $env:APP_SECRETS -Method GET)
              $logs = @()
              $expiringSecrets = @()
              $sortedLogs = @()
              $result = @()
              $nextCounter = 0
              do {
                  foreach ($event in ($applicationsList.Content | ConvertFrom-Json | select -ExpandProperty value)) {
                      $ids = $event.id
                      $appName = $event.displayName
                      $appId = $event.appId
                      $appSecret = $event.passwordCredentials
                      $nextCounter++
                      Write-Output "appName: $appName -eq SERVICE_PRINCIPAL: $env:SERVICE_PRINCIPAL?"
                      if ( $appName -eq $env:SERVICE_PRINCIPAL ) {
                          foreach ($secret in $appSecrets) {
                              $now = Get-Date
                              $expires = ( New-TimeSpan -Start $now -End $secret.endDateTime).ToString("dd")
                              $log = New-Object System.Object
                              $log | Add-Member -MemberType NoteProperty -Name "Application" -Value $appName
                              $log | Add-Member -MemberType NoteProperty -Name "ExpiresDays" -Value $expires
                              $log | Add-Member -MemberType NoteProperty -Name "Name"        -Value $secret.displayName
                              $log | Add-Member -MemberType NoteProperty -Name "StartDate"   -Value $secret.startDateTime
                              $log | Add-Member -MemberType NoteProperty -Name "EndDate"     -Value $secret.endDateTime
                              Write-Output "Current secret expiry date: $($secret.endDateTime)"
                              Write-Output "Is [int]$expires less than or equal to [int]$EXPIRES_WITHIN_DAYS ?"
                              if ( [int]$expires -le [int]$EXPIRES_WITHIN_DAYS ) {
                                  Write-Output "Service principal secret '$($secret.displayName)' expires in $expires days"
                                  $log | Add-Member -MemberType NoteProperty -Name "Alert" -Value $true
                                  $logs += $log
                                  break
                              }
                              else {
                                  $log | Add-Member -MemberType NoteProperty -Name "Alert" -Value $false
                                  $logs += $log
                              }
                          }
                      }
                      If ($nextCounter -eq 100) {
                          $odata = $applicationsList.Content | ConvertFrom-Json
                          $appsSecrets = $odata.'@odata.nextLink'
                          if ( $appsSecrets -ne $null)  {
                               $applicationsList = Invoke-WebRequest -UseBasicParsing -Headers $headerParams -Uri $appsSecrets -Method Get -ContentType "application/Json"
                          }
                          $nextCounter = 0
                          sleep 1
                      }
                  }
              } while ($appsSecrets -ne $null)

              # If we have an expiring secret then return the details
              if ($expiringSecrets = $logs | Where-Object Alert -eq true) {
                  Write-Output "Service principal has a secret that expires within specified period of $EXPIRES_WITHIN_DAYS days. Alert."
                  $result = ($expiringSecrets | ConvertTo-Json -Compress)
              }
              elseif (!$logs) {
                  # If we didn't find a service principal that matched then we don't need to alert
                  Write-Output "No matching service principals found."
                  $logs = New-Object System.Object
                  $logs | Add-Member -MemberType NoteProperty -Name "Alert" -Value $false
                  $result = ($logs | ConvertTo-Json -Compress)
              }
              else {
                  # If we have no expiring secrets, then return the one that expires soonest
                  Write-Output "Service principal has no secrets expiring within specified period of $EXPIRES_WITHIN_DAYS days."
                  $sortedLogs = ($logs | Sort-Object -Property ExpiresDays)
                  $result = ($sortedLogs[0] | ConvertTo-Json -Compress)
              }

              $json="{'data': $result }"
              Write-Output "::set-output name=result::$json"
              Write-Output "$json"
         env:
           LOGIN_URL:           "https://login.microsoftonline.com"
           APP_SECRETS:         "https://graph.microsoft.com/v1.0/applications"
           SCOPE:               "https://graph.microsoft.com/.default"
           AZURE_CREDENTIALS:   ${{INPUTS.AzureCredentials}}
           TENNANT_NAME:        ${{INPUTS.TennantName}}
           SERVICE_PRINCIPAL:   ${{INPUTS.ServicePrincipal}}
           EXPIRES_WITHIN_DAYS: ${{INPUTS.ExpiresWithinDays}}
