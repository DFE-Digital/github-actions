name: Check Service Principal
description:
inputs:
  AzureCredentials:
    description: "Azure Credentials"
    required: true
  ServicePrincipal:
    description: "Service Principal you want to check"
    required: true
  ExpiresWithinDays:
    description: "Only print keys that expire within the input value (days)"
    required: true
    default: 30
outputs:
  json_data:
    value: ${{ steps.get_expiry.outputs.result }}
    description: Result in JSON format
runs:
  using: composite
  steps:
    - uses: Azure/login@v2
      with:
        creds: ${{ inputs.AzureCredentials }}
    - name: Get Expiry Date
      shell: pwsh
      id: get_expiry
      run: |
        $AppSecrets = (az ad app list --display-name $env:SERVICE_PRINCIPAL | ConvertFrom-Json).passwordCredentials

        if ($AppSecrets) {
          Write-Output "Service Principal matching our search criteria '$($env:SERVICE_PRINCIPAL)' found with $($AppSecrets.Count) secret(s)."
          $ClosestSecretToExpiry = $AppSecrets | Sort-Object -Property endDateTime -Top 1
          $ExpiresInDays = (New-TimeSpan -Start (Get-Date) -End $ClosestSecretToExpiry.endDateTime).ToString("dd")
          $OutputProperties = @{
            Application = $env:SERVICE_PRINCIPAL
            ExpiresDays = $ExpiresInDays
            Name        = $ClosestSecretToExpiry.displayName
            StartDate   = $ClosestSecretToExpiry.startDateTime
            EndDate     = $ClosestSecretToExpiry.endDateTime
          }
          Write-Output "Closest secret expiry date: $($ClosestSecretToExpiry.endDateTime.ToString("dd/MM/yyyy HH:MM:ss"))"
          if ([int]$ExpiresInDays -le [int]$env:EXPIRES_WITHIN_DAYS) {
            Write-Output "Service principal has a secret that expires within $($env:EXPIRES_WITHIN_DAYS) days. Alert."
            $OutputProperties["Alert"] = $true
          }
          else {
            Write-Output "Service principal has no secrets expiring within specified period of $($env:EXPIRES_WITHIN_DAYS) days. Don't alert."
            $OutputProperties["Alert"] = $false
          }
        }
        else {
          Write-Output "No matching service principals found."
          $OutputProperties = @{ Alert = $false }
        }

        $Output = New-Object -TypeName PSCustomObject -Property $OutputProperties
        Write-Output "$($Output | ConvertTo-Json)"
        $Json="{'data': $($Output | ConvertTo-Json -Compress) }"
        Write-Output "result=$Json" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      env:
        SERVICE_PRINCIPAL: ${{ inputs.ServicePrincipal }}
        EXPIRES_WITHIN_DAYS: ${{ inputs.ExpiresWithinDays }}
