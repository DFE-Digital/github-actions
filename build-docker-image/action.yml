name: Build docker image
description: Build a docker image and push it to Github container registry

inputs:
  docker-repository:
    description: Repository name in the container registry. e.g. ghcr.io/dfe-digital/register-trainee-teachers. Defaults to current Github repository name.
    default: ghcr.io/${{ github.repository }}
  github-token:
    description: Default Github token retrieved via secrets.GITHUB_TOKEN or PAT with permission to the repository (Required)
    required: true
  snyk-token:
    description: Snyk token for image vulnerability scanning (Default = none)
  reuse-cache:
    description: Use previously built docker image layers to improve build time. Set to false to refresh image (Default = true)
    default: true
  dockerfile-path:
    description: Relative path to the Dockerfile (Default = ./Dockerfile)
    default: ./Dockerfile
  context:
    description: Path used as file context for Docker. If not set, the git repository is cloned using the same git reference as the workflow and used as context.
    default: ""
  target:
    description: The target stage to build of a multi-stage build
  max-cache:
    description: Use max caching for build
    default: false
    required: false
  slack-webhook:
    required: false

outputs:
  tag:
    description: Docker image unique tag
    value: ${{ steps.set-outputs.outputs.tag }}
  image:
    description: Reference to the built image name with the tag suitable for Kubernetes
    value: ${{ steps.set-outputs.outputs.repo }}:${{ steps.set-outputs.outputs.tag }}

runs:
  using: composite
  steps:
    - name: Ensure docker repository is lowercase
      shell: pwsh
      run: |
        $DockerRepository = "${{ inputs.docker-repository }}".ToLower()
        "DOCKER_REPOSITORY=$DockerRepository" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github-token }}

    - name: Set environment variables (push)
      if: github.event_name == 'push'
      shell: bash
      run: |
        GIT_BRANCH=${GITHUB_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV # GIT_BRANCH will be main for refs/heads/main
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Set environment variables (pull_request)
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        GIT_BRANCH=${GITHUB_HEAD_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

    - name: Set environment variables (default event)
      if: github.event_name != 'push' && github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "BRANCH_TAG=main" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
        echo "repo=${DOCKER_REPOSITORY}" >> "$GITHUB_OUTPUT"

    - name: Build docker image using inline cache
      uses: docker/build-push-action@v6
      if: ${{ ( inputs.reuse-cache == 'true' && inputs.max-cache == 'false' ) }}
      with:
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
        push: false
        load: true
        cache-to: type=inline
        cache-from: |
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:main
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
        build-args: COMMIT_SHA=${{ env.IMAGE_TAG }}
        file: ${{ inputs.dockerfile-path }}
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false

    - name: Build docker image without reusing inline cache
      uses: docker/build-push-action@v6
      if: ${{ ( inputs.reuse-cache == 'false' && inputs.max-cache == 'false' ) }}
      with:
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
        push: false
        load: true
        cache-to: type=inline
        build-args: COMMIT_SHA=${{ env.IMAGE_TAG }}
        file: ${{ inputs.dockerfile-path }}
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false

    - name: Set up Docker Buildx
      if: ${{ inputs.max-cache == 'true' }}
      uses: docker/setup-buildx-action@v3

    - name: Build docker image using max cache
      uses: docker/build-push-action@v6
      if: ${{ ( inputs.reuse-cache == 'true' && inputs.max-cache == 'true' ) }}
      with:
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
        push: false
        load: true
        cache-to: |
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}-buildcache,mode=max
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}-buildcache,mode=max
        cache-from: |
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:main-buildcache
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}-buildcache
        build-args: COMMIT_SHA=${{ env.IMAGE_TAG }}
        file: ${{ inputs.dockerfile-path }}
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false

    - name: Build docker image without reusing max cache
      uses: docker/build-push-action@v6
      if: ${{ ( inputs.reuse-cache == 'false' && inputs.max-cache == 'true' ) }}
      with:
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
        push: false
        load: true
        cache-to: |
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}-buildcache,mode=max
          type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}-buildcache,mode=max
        build-args: COMMIT_SHA=${{ env.IMAGE_TAG }}
        file: ${{ inputs.dockerfile-path }}
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false

    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      if: inputs.snyk-token != ''
      env:
        SNYK_TOKEN: ${{ inputs.snyk-token }}
      with:
        image: ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
        args: --file=${{ inputs.dockerfile-path }} --severity-threshold=high --exclude-app-vulns

    - name: Push ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} image to registry
      shell: bash
      run: docker image push --all-tags ${{ env.DOCKER_REPOSITORY }}

    - name: Notify slack channel on job failure
      uses: rtCamp/action-slack-notify@master
      if: ${{ failure() && github.ref == 'refs/heads/main' && inputs.slack-webhook != '' }}
      with:
        SLACK_USERNAME: CI Deployment
        SLACK_COLOR: failure
        SLACK_ICON_EMOJI: ':github-logo:'
        SLACK_TITLE: 'Build failure'
        SLACK_MESSAGE: ':alert: Build failure on commit ${{env.IMAGE_TAG}} :sadparrot:'
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_FOOTER: Sent from build-docker-image
